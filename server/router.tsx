import { Router } from "https://deno.land/x/oak@v12.2.0/mod.ts"
import * as ReactServerDom from "react-server-dom-webpack/server.browser"
import ServerRoot from "../app/page.tsx"
import { readClientComponentMap, resolveClientDist } from "./utils.ts"

export const router = new Router()

router.get("/rsc", async (ctx) => {
  // Render the Page component and send the query params as props.
  const Page = <ServerRoot
    search=""
    {...Object.fromEntries(ctx.request.url.searchParams)}
  />

  // The `clientComponentMap` is generated by the build step.
  // This is run on server startup and on `app/` file changes.
  // @see './build.js'
  const clientComponentMap = await readClientComponentMap()

  // ðŸ‘€ This is where the magic happens!
  // Render the server component tree to a stream.
  // This renders your server components in real time and
  // sends each component to the browser as soon as its resolved.
  const stream: ReadableStream = ReactServerDom.renderToReadableStream(
    Page,
    clientComponentMap,
  )
  ctx.response.body = stream
  ctx.response.headers.set("Content-Type", "text/html")
})

// Serve HTML homepage that fetches and renders the server component.
router.get("/", async (ctx) => {
  const html = await Deno.readTextFile(
    new URL("./templates/index.html", import.meta.url),
  )
  ctx.response.body = html
  ctx.response.headers.set("Content-Type", "text/html")
})

// Serve client-side components in `dist/client/`.
router.get("/dist/client/:rest*", async (ctx) => {
  console.log(ctx.params.rest!)
  ctx.response.body = await Deno.readTextFile(
    resolveClientDist(ctx.params.rest!),
  )
  ctx.response.headers.set("Content-Type", "application/javascript")
})
